name: 🚀 Release Package

# Workflow triggers
on:
  # Trigger on new tags (semantic versioning) and main branch for pre-release
  push:
    tags:
      - 'v*.*.*'        # v1.0.0, v2.1.3, etc.
      - 'v*.*.*-*'      # v1.0.0-alpha, v1.0.0-beta.1, etc.
    branches:
      - main
      - release/*
  
  # Manual trigger for releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: false
        default: ''
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  PYTHON_VERSION: '3.11'
  PACKAGE_NAME: 'vulnscanner'
  REGISTRY_URL: 'https://pypi.org/simple/'

# Workflow permissions
permissions:
  contents: write        # For creating releases
  packages: write        # For publishing packages
  id-token: write       # For trusted publishing to PyPI

jobs:
  # ================================
  # Job 1: Quality Assurance
  # ================================
  quality-assurance:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: pyproject.toml
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]" pytest pytest-asyncio pytest-cov pytest-xdist flake8 black isort mypy requests
      
      - name: 🔍 Lint Code Quality
        run: |
          # Code formatting check
          black --check --diff src/ tests/
          
          # Import sorting check
          isort --check-only --diff src/ tests/
          
          # Linting
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
          
          # Type checking
          mypy src/ --ignore-missing-imports
        continue-on-error: true
      
      - name: 🧪 Run Test Suite
        run: |
          # Run comprehensive test suite with coverage
          pytest \
            --cov=${{ env.PACKAGE_NAME }} \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junitxml=pytest-results.xml \
            -v \
            --tb=short \
            --maxfail=5 \
            -n auto
      
      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: coverage-${{ matrix.python-version }}
          fail_ci_if_error: false
      
      - name: 🎯 Validate Installation
        run: |
          # Test package installation and basic functionality
          python tests/test_run_all.py
          
          # Test CLI entry points
          vulnscanner --help
          python -m vulnscanner.cli --help
      
      - name: 📋 Store Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml
          retention-days: 7

  # ================================
  # Job 2: Security Scanning
  # ================================
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-assurance
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔍 Security Audit
        run: |
          # Install security tools
          pip install safety bandit semgrep requests
          
          # Check for known vulnerabilities in dependencies
          safety check
          
          # Static security analysis
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt
          
          # Advanced security scanning with Semgrep
          semgrep --config=auto src/ --json --output=semgrep-report.json
      
      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            semgrep-report.json
          retention-days: 30

  # ================================
  # Job 3: Build Package
  # ================================
  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-assurance, security-scan]
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🏷️ Determine Version
        id: version
        run: |
          pip install setuptools_scm
          python scripts/get_version.py
      
      - name: 🛠️ Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools-scm
      
      - name: 🏗️ Build Package
        run: |
          # Clean previous builds
          rm -rf dist/ build/ *.egg-info/
          
          # Build source distribution and wheel
          python -m build
          
          # Verify build contents
          echo "📦 Built packages:"
          ls -la dist/
          
          # Check package integrity
          twine check dist/*
      
      - name: 📋 Store Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-distributions
          path: dist/
          retention-days: 90

  # ================================
  # Job 4: Integration Testing
  # ================================
  integration-test:
    name: 🧪 Integration Testing
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: build-package
    
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-12]
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: pyproject.toml
      
      - name: 📦 Download Built Package
        uses: actions/download-artifact@v4
        with:
          name: package-distributions
          path: dist/
      
      - name: 🧪 Test Package Installation
        run: |
          # Install from wheel
          pip install dist/*.whl
          
          # Test basic functionality
          vulnscanner --help
          python -c "import vulnscanner; print('✅ Package imported successfully')"
          
          # Test CLI without database operations (no external dependencies)
          python -c "
          from vulnscanner.cli import main
          from click.testing import CliRunner
          runner = CliRunner()
          result = runner.invoke(main, ['--help'])
          assert result.exit_code == 0
          print('✅ CLI functionality verified')
          "
      
      - name: 🧪 Cross-Platform Validation
        shell: bash
        run: |
          # Test configuration loading
          python -c "
          from vulnscanner.config import Settings
          settings = Settings()
          print(f'✅ Configuration loaded: DB={settings.database_path}')
          "
          
          # Test database schema (without external API calls)
          python -c "
          import tempfile
          import os
          from vulnscanner.db import ensure_database
          
          with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
              db_path = f.name
          
          os.environ['VULNSCANNER_DB'] = db_path
          ensure_database()
          print('✅ Database schema creation verified')
          
          # Cleanup
          os.unlink(db_path)
          "

  # ================================
  # Job 5: Publish to PyPI
  # ================================
  publish-pypi:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-package, integration-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: 📦 Download Built Package
        uses: actions/download-artifact@v4
        with:
          name: package-distributions
          path: dist/
      
      - name: 🚀 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verify-metadata: true
          verbose: true
          print-hash: true

  # ================================
  # Job 6: Publish to Test PyPI
  # ================================
  publish-test-pypi:
    name: 🧪 Publish to Test PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-package, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📦 Download Built Package
        uses: actions/download-artifact@v4
        with:
          name: package-distributions
          path: dist/
      
      - name: 🧪 Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          verify-metadata: true
          verbose: true

  # ================================
  # Job 7: Create GitHub Release
  # ================================
  github-release:
    name: 📋 Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-package, integration-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Download Built Package
        uses: actions/download-artifact@v4
        with:
          name: package-distributions
          path: dist/
      
      - name: 📋 Generate Release Notes
        id: release_notes
        run: |
          echo "## Placeholder Release Notes" > release_notes.md
          echo "A new release is available." >> release_notes.md
      
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-package.outputs.version }}
          name: "VulnScanner ${{ needs.build-package.outputs.version }}"
          body_path: release_notes.md
          files: dist/*
          draft: false
          prerelease: ${{ needs.build-package.outputs.is_prerelease == 'true' }}
          # generate_release_notes: true # We are generating custom release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ================================
  # Job 8: Post-Release Validation
  # ================================
  post-release-validation:
    name: ✅ Post-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [publish-pypi, github-release]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: ⏳ Wait for PyPI Propagation
        run: |
          echo "⏳ Waiting for package ${{ needs.build-package.outputs.version }} to propagate on PyPI..."
          python -c "import requests; import time; import sys; version = \"${{ needs.build-package.outputs.version }}\"; package_name = \"${{ env.PACKAGE_NAME }}\"; pypi_url = f\"https://pypi.org/pypi/{package_name}/{{version}}/json\"; max_attempts = 10; wait_seconds = 10; \nfor attempt in range(max_attempts):\n    print(f\"Attempt {attempt + 1}/{max_attempts}: Checking {pypi_url}\")\n    try:\n        response = requests.get(pypi_url, timeout=5)\n        if response.status_code == 200:\n            print(f\"✅ Package {package_name}=={{version}} found on PyPI.\")\n            sys.exit(0)\n    except requests.exceptions.RequestException as e:\n        print(f\"⚠️ Request failed: {{e}}\")\n    time.sleep(wait_seconds)\nprint(f\"❌ Package {package_name}=={{version}} not found on PyPI after {max_attempts * wait_seconds} seconds.\")\nsys.exit(1)"
      
      - name: ✅ Validate PyPI Installation
        run: |
          # Install from PyPI
          pip install vulnscanner==${{ needs.build-package.outputs.version }}
          
          # Validate installation
          vulnscanner --help
          python -c "import vulnscanner; print(f'✅ Installed version: {vulnscanner.__version__}')"
          
          echo "🎉 Package successfully published and validated on PyPI!"
      
      - name: 📧 Notify on Failure
        if: failure()
        run: |
          echo "❌ Post-release validation failed!"
          echo "Manual verification required for version ${{ needs.build-package.outputs.version }}"

  # ================================
  # Job 9: Cleanup and Notification
  # ================================
  cleanup:
    name: 🧹 Cleanup & Notify
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-assurance, security-scan, build-package, integration-test, publish-pypi, github-release, post-release-validation]
    if: always()
    
    steps:
      - name: 📋 Workflow Summary
        run: |
          echo "## 🚀 Release Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Assurance | ${{ needs.quality-assurance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Package | ${{ needs.build-package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Test | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Publish PyPI | ${{ needs.publish-pypi.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.github-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-Release Validation | ${{ needs.post-release-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-package.result }}" == "success" ]]; then
            echo "📦 **Version:** ${{ needs.build-package.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Pre-release:** ${{ needs.build-package.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Workflow completed!**" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Send Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: failure
          message: '❌ VulnScanner Release Workflow Failed'
          full_workflow_path: ${{ github.workflow }}
          color: 'danger'
          text: 'The release workflow for VulnScanner has failed. Check the details below:'
