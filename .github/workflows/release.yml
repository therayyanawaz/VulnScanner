name: Python Package CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch: # Allows manual triggering
  create: # Trigger on tag creation
    tags:
      - 'v*' # Trigger on tags like v1.0.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Enable debug logging
      run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-httpx
    - name: Run tests
      run: |
        pytest
  
  lint:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev] # Install dev dependencies from pyproject.toml
      - name: Run linters
        run: |
          black --check .
          isort --check-only .
          flake8 .
          mypy src/vulnscanner/
          bandit -r src/vulnscanner/
          safety check -r requirements.txt

  publish:
    needs: lint
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use a general Python version for publishing
    - name: Install build and publish dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Get package version from tag
      id: get_version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
    - name: Build sdist and wheel
      run: python -m build
    - name: Publish package to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
